import 'package:efiling_balochistan/config/router/route_helper.dart';
import 'package:efiling_balochistan/config/router/routes.dart';
import 'package:efiling_balochistan/constants/app_colors.dart';
import 'package:efiling_balochistan/controllers/controllers.dart';
import 'package:efiling_balochistan/models/file_details_model.dart';
import 'package:efiling_balochistan/models/flag_model.dart';
import 'package:efiling_balochistan/models/forward_to.dart';
import 'package:efiling_balochistan/models/section_schema.dart';
import 'package:efiling_balochistan/services/ai_agent.dart';
import 'package:efiling_balochistan/views/screens/chats/ai_agent_chat_screen.dart';
import 'package:efiling_balochistan/views/screens/files/file_card.dart';
import 'package:efiling_balochistan/views/screens/files/flag_attachement/add_file_flag_and_attachmention.dart';
import 'package:efiling_balochistan/views/screens/files/flag_attachement/read_only_flag_attachment.dart';
import 'package:efiling_balochistan/views/screens/files/preview_file.dart';
import 'package:efiling_balochistan/views/widgets/app_text.dart';
import 'package:efiling_balochistan/views/widgets/buttons/outline_button.dart';
import 'package:efiling_balochistan/views/widgets/buttons/solid_button.dart';
import 'package:efiling_balochistan/views/widgets/loading_card.dart';
import 'package:efiling_balochistan/views/widgets/text_fields/app_drop_down_field.dart';
import 'package:efiling_balochistan/views/widgets/toast.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:quill_html_editor_v2/quill_html_editor_v2.dart';

class FileDetailsScreen extends ConsumerStatefulWidget {
  final int? fileId;
  final FileType fileType;
  const FileDetailsScreen({
    super.key,
    required this.fileId,
    required this.fileType,
  });

  @override
  ConsumerState<FileDetailsScreen> createState() => _FileDetailsScreenState();
}

class _FileDetailsScreenState extends ConsumerState<FileDetailsScreen> {
  final GlobalKey<FormState> formKey = GlobalKey<FormState>();

  final QuillEditorController quillEditorController = QuillEditorController();
  String? selectedFileType;
  bool showHtmlEditor = true;
  bool loading = true;
  String autoGeneratedFileNumber = '';
  FileDetailsModel? details;
  List<FlagModel> allFlags = [];
  List<ForwardToModel>? forwardToList;
  SectionModel? selectedSection;
  ForwardToModel? forwardTo;

  List<FlagAndAttachmentModel> attachments = [
    FlagAndAttachmentModel(),
  ];

  List<FlagModel> get flagsUsed =>
      details?.attachments == null || details!.attachments.isEmpty
          ? []
          : details!.attachments
              .map((a) => allFlags.firstWhere(
                    (e) => e.title == a.flagTitle,
                    orElse: () => FlagModel(),
                  ))
              .where((f) => f.id != null)
              .toList();

  Future fetchData() async {
    final controller = ref.read(filesController.notifier);
    if (widget.fileType == FileType.my) {
      details =
          await controller.fetchFileDetails(widget.fileId!, widget.fileType);
      setState(() {
        loading = false;
      });
      return;
    }
    controller.getSections();
    allFlags = await controller.getFlags();
    details =
        await controller.fetchFileDetails(widget.fileId!, widget.fileType);
    autoGeneratedFileNumber = await controller.autoGenerateFileMovNumber();
    attachments = [
      FlagAndAttachmentModel(usedFlags: flagsUsed),
    ];
    setState(() {
      loading = false;
    });
  }

  @override
  void initState() {
    AIAgent().resetMessages();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      fetchData();
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final state = ref.watch(filesController);
    return RefreshIndicator(
      onRefresh: fetchData,
      child: Scaffold(
        appBar: AppBar(
          title: AppText.headlineSmall("File Details"),
          backgroundColor: AppColors.background,
          centerTitle: false,
          actions: [
            if (details != null)
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                child: AppSolidButton(
                  onPressed: () {
                    showModalBottomSheet(
                      context: context,
                      constraints: BoxConstraints(
                          maxHeight: MediaQuery.sizeOf(context).height * 0.9),
                      showDragHandle: false,
                      isScrollControlled: true,
                      backgroundColor: AppColors.background,
                      shape: const RoundedRectangleBorder(
                        borderRadius: BorderRadius.only(
                          topLeft: Radius.circular(16),
                          topRight: Radius.circular(16),
                        ),
                      ),
                      builder: (BuildContext context) {
                        return Padding(
                          padding: const EdgeInsets.fromLTRB(8, 8, 8, 0),
                          child: AIAgentChatScreen(file: details),
                        );
                      },
                    );
                  },
                  text: "E-Filing Assistant",
                  icon: Icons.auto_awesome,
                  // color: AppColors.secondaryDark,
                  backgroundColor: AppColors.secondaryDark,
                  fontSize: 16,
                  padding:
                      const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                ),
              ),
          ],
        ),
        body: loading
            ? const Padding(
                padding: EdgeInsets.all(16.0),
                child: LoadingCard(),
              )
            : SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Form(
                  key: formKey,
                  child: Column(
                    children: [
                      header(Icons.text_snippet_outlined, "File"),
                      const SizedBox(height: 16),
                      PreviewFile(content: details?.content),
                      const SizedBox(height: 24),
                      if (widget.fileType != FileType.my)
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            header(Icons.short_text_outlined, "Remarks"),
                            const SizedBox(height: 16),
                            ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Container(
                                padding: const EdgeInsets.all(8),
                                decoration: BoxDecoration(
                                    border: Border.all(
                                        color: AppColors.secondaryLight
                                            .withOpacity(0.5)),
                                    borderRadius: BorderRadius.circular(12),
                                    color: AppColors.white),
                                child: Column(
                                  children: [
                                    ToolBar(
                                      activeIconColor: Colors.blue,
                                      padding: const EdgeInsets.all(8),
                                      iconSize: 24,
                                      controller: quillEditorController,
                                      toolBarConfig: const [
                                        ToolBarStyle.bold,
                                        ToolBarStyle.italic,
                                        ToolBarStyle.underline,
                                        //ToolBarStyle.listBullet,
                                        ToolBarStyle.listOrdered,
                                        ToolBarStyle.size,
                                        ToolBarStyle.headerOne,
                                        ToolBarStyle.headerTwo,
                                        ToolBarStyle.link,
                                        ToolBarStyle.align,
                                        ToolBarStyle.color,
                                        ToolBarStyle.blockQuote,
                                        ToolBarStyle.codeBlock,
                                        ToolBarStyle.addTable,
                                        ToolBarStyle.editTable,
                                      ],
                                    ),
                                    Divider(color: Colors.grey[300]!),
                                    const SizedBox(height: 8),
                                    Container(
                                      child: showHtmlEditor
                                          ? QuillHtmlEditor(
                                              text: '',
                                              hintText: "...",
                                              autoFocus: true,
                                              controller: quillEditorController,
                                              minHeight: 270,
                                              textStyle: const TextStyle(
                                                fontSize: 16,
                                                color: Colors.black,
                                              ),
                                              hintTextStyle: const TextStyle(
                                                fontSize: 16,
                                                color: Colors.grey,
                                              ),
                                              onEditorCreated: () {
                                                quillEditorController
                                                    .requestFocus();
                                              },
                                            )
                                          : const SizedBox.shrink(),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                            const SizedBox(height: 12),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.end,
                              children: [
                                AppOutlineButton(
                                  onPressed: () {
                                    RouteHelper.push(Routes.fileChat(0));
                                  },
                                  text: "Start Discussion",
                                  icon: Icons.chat,
                                  color: AppColors.primaryDark,
                                  textSize: 16,
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 16, vertical: 12),
                                ),
                                const SizedBox(width: 12),
                                AppOutlineButton(
                                  onPressed: () {
                                    showModalBottomSheet(
                                      context: context,
                                      constraints: BoxConstraints(
                                          maxHeight: MediaQuery.sizeOf(context)
                                                  .height *
                                              0.9),
                                      showDragHandle: false,
                                      isScrollControlled: true,
                                      backgroundColor: AppColors.background,
                                      shape: const RoundedRectangleBorder(
                                        borderRadius: BorderRadius.only(
                                          topLeft: Radius.circular(16),
                                          topRight: Radius.circular(16),
                                        ),
                                      ),
                                      builder: (BuildContext context) {
                                        return const Padding(
                                          padding:
                                              EdgeInsets.fromLTRB(8, 8, 8, 0),
                                          child: AIAgentChatScreen(),
                                        );
                                      },
                                    );
                                  },
                                  text: "Draft with AI",
                                  icon: Icons.drafts_rounded,
                                  color: AppColors.secondary,
                                  textSize: 16,
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 16, vertical: 12),
                                ),
                              ],
                            ),
                            const SizedBox(height: 24),
                          ],
                        ),
                      if (details?.attachments != null &&
                          details!.attachments.isNotEmpty)
                        ReadOnlyFlagAttachmentList(
                          header: header(Icons.flag_outlined, "Flags"),
                          data: details!.attachments,
                        ),
                      if (widget.fileType != FileType.my)
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const SizedBox(height: 24),
                            header(Icons.code, "Section"),
                            const SizedBox(height: 16),
                            Column(
                              children: [
                                Container(
                                  child: AppDropDownField<SectionModel>(
                                    items: state.sections,
                                    onChanged: (item) async {
                                      setState(() {
                                        selectedSection = item;
                                      });
                                      forwardToList = await ref
                                          .read(filesController.notifier)
                                          .getForwardTo(item?.id);
                                      setState(() {
                                        if (forwardToList != null &&
                                            forwardToList?.length == 1) {
                                          forwardTo = forwardToList?.first;
                                        }
                                      });
                                    },
                                    labelText: "Section",
                                    hintText: "Select Section",
                                    prefix: state.loadingSections
                                        ? fieldLoader
                                        : null,
                                    itemBuilder: (item) {
                                      return AppText.titleMedium(
                                          item?.title ?? '');
                                    },
                                    validator: (item) {
                                      if (selectedSection == null ||
                                          item == null) {
                                        return 'Please select a value';
                                      }
                                      return null;
                                    },
                                  ),
                                ),
                                const SizedBox(height: 12),
                                Container(
                                  child: AppDropDownField<ForwardToModel>(
                                    items: forwardToList ?? [],
                                    onChanged: (item) {
                                      setState(() {
                                        forwardTo = item;
                                      });
                                    },
                                    labelText: "Forward this file to",
                                    hintText: "Forward to",
                                    prefix: selectedSection != null &&
                                            state.loadingForwardList
                                        ? fieldLoader
                                        : null,
                                    itemBuilder: (item) {
                                      return Row(
                                        children: [
                                          AppText.titleMedium(
                                              item?.userTitle ?? ''),
                                          const SizedBox(width: 8),
                                          AppText.bodyMedium(
                                              "(${item?.designationTitle ?? ''})"),
                                        ],
                                      );
                                    },
                                    validator: (item) {
                                      if (forwardTo == null || item == null) {
                                        return 'Please select a value';
                                      }
                                      return null;
                                    },
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 12),
                            AppText.titleLarge("(Optional Fields)"),
                            ListView.separated(
                              itemCount: attachments.length,
                              shrinkWrap: true,
                              physics: const NeverScrollableScrollPhysics(),
                              separatorBuilder: (_, i) => Divider(
                                height: 40,
                                color:
                                    AppColors.secondaryLight.withOpacity(0.5),
                              ),
                              itemBuilder: (ctx, i) {
                                final model = attachments[i];
                                return AddFlagAndAttachment(
                                  key: ValueKey(
                                      model), // keep identity stable across rebuilds
                                  model: model,
                                  onDelete: i == 0
                                      ? null
                                      : () {
                                          setState(
                                              () => attachments.removeAt(i));
                                        },
                                );
                              },
                            ),
                            const SizedBox(height: 12),
                            Align(
                              alignment: Alignment.centerRight,
                              child: AppOutlineButton(
                                onPressed: () {
                                  setState(() {
                                    attachments.add(
                                      FlagAndAttachmentModel(
                                        usedFlags: [
                                          ...flagsUsed,
                                          ...attachments
                                                  .map((e) =>
                                                      e.flagType ?? FlagModel())
                                                  .toList() ??
                                              [],
                                        ],
                                      ),
                                    );
                                  });
                                },
                                text: "Add More",
                                color: AppColors.secondary,
                                textSize: 18,
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 16, vertical: 12),
                              ),
                            ),
                            const SizedBox(height: 24),
                            Align(
                              alignment: Alignment.centerLeft,
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  AppText.titleLarge(
                                    "Your File Movement Number is:",
                                    color: AppColors.secondaryDark,
                                  ),
                                  AppText.bodyMedium(autoGeneratedFileNumber),
                                ],
                              ),
                            ),
                            const SizedBox(height: 24),
                          ],
                        ),
                      AppSolidButton(
                        onPressed: () async {
                          FocusScope.of(context).unfocus();
                          FocusManager.instance.primaryFocus?.unfocus();
                          if (widget.fileType == FileType.my) {
                            RouteHelper.pop();
                            return;
                          }
                          if (!formKey.currentState!.validate()) return;
                          String text = await quillEditorController.getText();
                          if (text.trim().isEmpty) {
                            Toast.show(
                                message: "Add remarks before you submit");
                            return;
                          }
                          ref
                              .read(filesController.notifier)
                              .sendPendingFileRemarks(
                                fileId: details!.content.first!.fileId!,
                                content: text,
                                forwardTo: forwardTo!.userId!,
                                fileMovNo: autoGeneratedFileNumber,
                                lastTrackId: details!.content!.last!.trackId!,
                                flags: attachments,
                              );
                        },
                        text:
                            widget.fileType == FileType.my ? "Close" : "Submit",
                        backgroundColor: AppColors.primary,
                        width: double.infinity,
                      ),
                      const SizedBox(height: 16),
                    ],
                  ),
                ),
              ),
      ),
    );
  }

  Widget header(IconData icon, String title) {
    return Row(
      children: [
        Card(
          margin: const EdgeInsets.all(0),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          color: AppColors.cardColor,
          child: Padding(
            padding: const EdgeInsets.all(8.0),
            child: Icon(icon, size: 24, color: AppColors.primaryDark),
          ),
        ),
        const SizedBox(width: 8),
        AppText.headlineSmall(
          title,
          color: AppColors.primaryDark,
        ),
      ],
    );
  }

  final Widget fieldLoader = Container(
    width: 12,
    height: 12,
    margin: const EdgeInsets.only(right: 8),
    child: const CircularProgressIndicator(
      strokeWidth: 2,
    ),
  );
}
